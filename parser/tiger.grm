%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 

%nonterm  exp | program | exps | cond | lvalue | loop | decs | expseq
%nonassoc IF FOR WHILE
%nonassoc THEN TO
%nonassoc ELSE DO
%left ASSIGN
%nonassoc EQ NEQ LT GT GE LE
%left AND OR
%left PLUS MINUS
%left TIMES DIVIDE


%pos int
%verbose
%start program
%eop EOF
%noshift EOF
%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
        DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program : exps                           ()

exps : exp exps                          ()
    | exp                                ()

decs : VAR                               ()

lvalue : ID                              ()
    | lvalue DOT ID                      ()
    | lvalue LBRACK exp RBRACK           ()

loop : WHILE exp DO exp                  ()
    | FOR ID ASSIGN exp TO exp DO exp    ()
        
exp : INT                                ()
    | lvalue ASSIGN exp                  ()
    | lvalue                             ()
    | STRING                             ()
    | cond                               ()
    | loop                               ()
    | exp OR exp                         ()
    | exp AND exp                        ()
    | exp GE exp                         ()
    | exp LE exp                         ()
    | exp LT exp                         ()
    | exp GT exp                         ()
    | exp EQ exp                         ()
    | exp NEQ exp                        ()
    | exp PLUS exp                       ()
    | exp MINUS exp                      ()
    | exp TIMES exp                      ()
    | exp DIVIDE exp                     ()
    | LET decs IN expseq END             ()
    | LPAREN exp RPAREN                  ()
    | LPAREN RPAREN                      ()

cond : IF exp THEN exp ELSE exp          ()
    | IF exp THEN exp                    () 

expseq : exp SEMICOLON expseq            ()
    | exp                                ()
