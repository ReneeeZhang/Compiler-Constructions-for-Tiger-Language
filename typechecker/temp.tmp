structure Semant :> 
sig 
  val transProg : Absyn.exp -> unit 
  val gettype : Types.ty -> Types.ty
  
end = 
struct

  type ty = Types.ty
  type venv = Env.enventry Symbol.table
  type tenv = ty Symbol.table
  type expty = {exp : Translate.exp, ty : ty}

  structure A = Absyn
  structure E = Env
  structure S = Symbol

  fun checkint({exp,ty}, pos) = 
    case ty of Types.INT => ()
       | _ => ErrorMsg.error pos ("Integer Required")  

  (*Fun for unwrapping Types.NAME*)
  fun gettype(Types.NAME(_, ref(SOME(ty)))) = ty
    | gettype(Types.NAME(_,ref(NONE))) = Types.NIL
    | gettype(Types.INT) = Types.INT
    | gettype(Types.STRING) = Types.STRING
    | gettype(Types.UNIT) = Types.UNIT
    | gettype(Types.NIL) = Types.NIL
    | gettype(Types.RECORD(ls, un)) = Types.RECORD(ls, un)
    | gettype(Types.ARRAY(ty, un)) = Types.ARRAY(ty, un)

  fun transExp (venv, tenv, exp : Absyn.exp) =
    let
      (*Trivial stuff*)
      fun trexp (A.OpExp{left,oper=A.PlusOp,right,pos}) = 
                 (checkint(trexp left, pos); checkint(trexp right, pos);
                  {exp=(), ty=Types.INT})
      | trexp (A.OpExp{left,oper=A.MinusOp,right,pos}) = 
                 (checkint(trexp left, pos); checkint(trexp right, pos);
                  {exp=(), ty=Types.INT})
      | trexp (A.OpExp{left,oper=A.TimesOp,right,pos}) = 
                 (checkint(trexp left, pos); checkint(trexp right, pos);
                  {exp=(), ty=Types.INT})
      | trexp (A.OpExp{left,oper=A.DivideOp,right,pos}) = 
                 (checkint(trexp left, pos); checkint(trexp right, pos);
                  {exp=(), ty=Types.INT})
      | trexp (A.OpExp{left,oper=A.LeOp,right,pos}) = 
                 (checkint(trexp left, pos); checkint(trexp right, pos);
                  {exp=(), ty=Types.INT})
      | trexp (A.OpExp{left,oper=A.LtOp,right,pos}) = 
                 (checkint(trexp left, pos); checkint(trexp right, pos);
                  {exp=(), ty=Types.INT})
      | trexp (A.OpExp{left,oper=A.GeOp,right,pos}) = 
                 (checkint(trexp left, pos); checkint(trexp right, pos);
                  {exp=(), ty=Types.INT})
      | trexp (A.OpExp{left,oper=A.GtOp,right,pos}) = 
                 (checkint(trexp left, pos); checkint(trexp right, pos);
                  {exp=(), ty=Types.INT})
      | trexp (A.OpExp{left,oper=A.EqOp,right,pos}) = 
                 (checkint(trexp left, pos); checkint(trexp right, pos);
                  {exp=(), ty=Types.INT})
      | trexp (A.OpExp{left,oper=A.NeqOp,right,pos}) = 
                 (checkint(trexp left, pos); checkint(trexp right, pos);
                  {exp=(), ty=Types.INT})
      | trexp (A.IntExp(intval)) = {exp=(), ty=Types.INT}
      | trexp (A.StringExp(stringval, pos)) = {exp=(), ty=Types.STRING}
      | trexp (A.NilExp) = {exp=(), ty = Types.NIL} 
      | trexp (A.VarExp(var)) = trvar var

      (*Nontrivial stuff*)
      (*TODO: still missing Call Record Break exps*)
      (*Assign exps*)
      | trexp (A.AssignExp{var, exp, pos}) = 
        let 
          val {exp=exp1,ty=ty1} = trexp(exp)
          val {exp=exp2,ty=ty2} = trvar(var)
        in
         (if ty1=ty2 then () else ErrorMsg.error pos ("Assign types not equal"); {exp=(), ty = Types.UNIT})
        end

      (*While exps*)
        | trexp (A.WhileExp{test, body, pos}) = 
          let
            val {exp=exp_test, ty=ty_test} = trexp(test)
            val {exp=exp_body, ty=ty_body} = trexp(body)
          in
            (if ty_test=Types.INT then () else ErrorMsg.error pos ("Loop condition must be int");
             if ty_body=Types.UNIT then () else ErrorMsg.error pos ("Loop body must be type unit");
             {exp=(), ty=Types.UNIT})
          end

      (*For exps*)
        | trexp (A.ForExp{var, escape, lo, hi, body, pos}) = 
          let 
            val venv' = S.enter(venv, var, {access=(), ty=Types.INT})
            val {exp=exp_lo, ty=ty_lo} = trexp(lo)
            val {exp=exp_hi, ty=ty_hi} = trexp(hi)
            val {exp=exp_body, ty=ty_body} = transExp(venv',tenv,body)
          in
            (if ty_lo=Types.INT then () else ErrorMsg.error pos ("Loop bounds must be int");
             if ty_hi=Types.INT then () else ErrorMsg.error pos ("Loop bounds must be int");
             if ty_body=Types.UNIT then () else ErrorMsg.error pos ("Loop body must be type unit");
             {exp=(), ty=Types.UNIT})
          end

      (*If Exps*)
        | trexp (A.IfExp{test, then', else', pos}) = 
          (case else' of SOME(expression) =>  
            let 
              val {exp=expthen, ty=tythen} = trexp(then')
              val {exp=expelse, ty=tyelse} = trexp(valOf(else'))
              val {exp=exptest, ty=tytest} = trexp(test)
            in
              (if tythen=tyelse then () else ErrorMsg.error pos ("Types mismatched");
               if tytest=Types.INT then () else ErrorMsg.error pos ("Test requires type INT");
               {exp=(), ty = tythen})
            end
          | NONE =>
            let 
              val {exp=expthen, ty=tythen} = trexp(then')
              val {exp=exptest, ty=tytest} = trexp(test)
            in
              (if tythen=Types.UNIT then () else ErrorMsg.error pos ("If-then must return unit");
               if tytest=Types.INT then () else ErrorMsg.error pos ("Test requires type INT");
               {exp=(), ty=tythen})
            end
            )

      (*Array Exps*)
      | trexp(A.ArrayExp{typ, size, init, pos}) = 
          let
            val {exp=exp_size, ty=ty_size} = trexp(size)
            val {exp=exp_init, ty=ty_init} = trexp(init)
          in
            (if ty_size = Types.INT then () else ErrorMsg.error pos ("Array size must be integer");
             if ty_init = Types.INT then () else ErrorMsg.error pos ("Array init must be integer");
             case S.look(tenv, typ) of SOME(Types.ARRAY(fields)) => {exp=(), ty=Types.ARRAY(fields)}
                | SOME (_) => (ErrorMsg.error pos ("Non-array type"); {exp=(),
                  ty=Types.UNIT})
                | NONE => (ErrorMsg.error pos ("Undefined array type"); {exp=(),
                  ty=Types.UNIT}))
          end

      (*Let Exps*)
      | trexp (A.LetExp{decs,body,pos}) = 
        let val {venv=venv',tenv=tenv'} = transDecs(venv,tenv,decs)
        in transExp(venv',tenv',body)
        end
 
      (*Seq Exps*)
      | trexp (A.SeqExp([])) = {exp=(), ty=Types.UNIT}
      | trexp (A.SeqExp([t])) = trexp (#1 t)
      | trexp (A.SeqExp(h::t)) = (trexp (#1 h); trexp(A.SeqExp(t)))

      (*Simple vars*)
      and trvar (A.SimpleVar(id, pos)) = 
       (case S.look(venv,id) of SOME({access=(), ty=ty}) =>
            {exp=(), ty = gettype ty}
        | NONE => (ErrorMsg.error pos ("Undefined Variable ");
                   {exp=(), ty=Types.INT}))
      (* Array vars *)
      | trvar (A.SubscriptVar(var, expression, pos)) = 
        case trvar(var) of {exp=_, ty=Types.ARRAY(ty, un)} =>
          let 
            val {exp=var_exp, ty=var_ty} = trvar var
            val {exp=exp_exp, ty=exp_ty} = trexp expression
          in
            (if exp_ty=Types.INT then () else ErrorMsg.error pos ("Array index must be int"); 
             {exp=(), ty=ty})
          end
        | {exp=_, ty=_} => (ErrorMsg.error pos ("Attempting to index non-array"); {exp=(), ty=Types.UNIT})

        (* TODO: write field vars *)

    in
      trexp(exp)
    end

  (*Dec list, venv, tenv -> venv',tenv'*)
  and transDecs (venv, tenv, []) = {venv=venv, tenv=tenv}
    | transDecs (venv, tenv, h::t) = 
        let val {venv=venv', tenv=tenv'} = transDec(venv, tenv, h)
        in transDecs (venv', tenv', t)
        end

  (*Singleton dec, venv, tenv -> venv', tenv'*)
  (*TODO: Fun decs*)  
  (*Var decs*)
  and transDec (venv,tenv,A.VarDec{escape,init,name,pos,typ=NONE}) = 
    let val {exp,ty} = transExp(venv,tenv,init)
    in {tenv=tenv, venv=S.enter(venv,name,{access=(), ty=ty})}
    end
  | transDec (venv, tenv, A.VarDec{escape,init,name,pos,typ=SOME(typ)}) =
    let 
      val {exp,ty} = transExp(venv,tenv,init)
      val test = case S.look(tenv, (#1 typ)) of SOME(label_ty) =>
                   if label_ty=ty then () else ErrorMsg.error pos ("Mismatched type")
                    | NONE => ErrorMsg.error pos ("Undefined type")
    in
      {tenv=tenv, venv=S.enter(venv,name,E.VarEntry{ty=ty})}
    end
        
   

  (*Type Decs*)
  | transDec (venv,tenv,A.TypeDec(ty_list)) = 
    let 
      fun add_types (tenv, []) = tenv
        | add_types (tenv, {name,ty,pos}::t) = 
            let val tenv' = add_types (tenv, t)
            in S.enter(tenv', name, transTy(tenv', ty)) 
            end
    in
      {venv=venv, tenv=add_types(tenv, ty_list)}
    end
  (*Single-function funcdec with 0 or more params*)
  | transDec (venv,tenv,
      A.FunctionDec([{name, params, body, pos,
        result=SOME(rt,pos)}])) =
      let val result_ty = case S.look(tenv,rt) of
          SOME(rty) => rty
          | _ => ErrorMsg.error pos ("Undefined return type " ^ rt ^ " in function definition")
        fun transparam{name, typ, pos} = 
            case S.look(tenv, typ) of
              SOME t => {name=name, ty=t}
              | _ => ErrorMsg.error pos ("Undefined type " ^ typ ^ " for parameter " ^ name ^ " in function definition")
        val params' = map transparam params
        fun enterparam({name,ty},venv) = S.enter(venv, name, E.VarEntry(access=(),ty=ty))
        val venv' = foldl enterparam venv params' (*Pretty sure this was a typo in the book*)
        val {exp=_,ty=bodytype} = transExp(venv, tenv, body)
      in if bodytype <> result_ty then ErrorMsg.error pos ("Function body type does not match specified return type") else (); {venv=venv',tenv=tenv}
      end
  
  (*Single-procedure funcdec with 0 or more params*)
  | transDec (venv,tenv,
      A.FunctionDec([{name, params, body, pos,
        result=NONE}])) =
      let
        fun transparam{name, typ, pos} = 
            case S.look(tenv, typ) of
              SOME t => {name=name, ty=t}
              | _ => ErrorMsg.error pos ("Undefined type " ^ typ ^ " for parameter " ^ name ^ " in function definition at position " ^ Int.toString(pos))
        val params' = map transparam params
        fun enterparam({name,ty},venv) = S.enter(venv, name, E.VarEntry(access=(),ty=ty))
        val venv' = foldl enterparam venv params' (*Pretty sure this was a typo in the book*)
        val {exp=_,ty=bodytype} = transExp(venv', tenv, body)
      in if bodytype <> Types.NIL then ErrorMsg.error pos ("Procedure body type must be NIL") else (); {venv=venv,tenv=tenv}
      end
  
  (*funcdec with multiple functions/procedures*)
  | transDec (venv,tenv, A.FunctionDec([fd::otherfds])) =
    processFunDecList(collectHeadersFromFunDecList(venv, tenv, A.FunctionDec([fd::otherfds])),tenv,A.FunctionDec([fd::otherfds])) 
  
  and processFunDecList(venv,tenv, A.FunctionDec([fd::otherfds])) =
    (transDec(venv,tenv,[fd]); processFunDecList(venv,tenv,otherfds))
    | processFunDecList(venv,tenv, A.FunctionDec([fd])) =
    transDec(venv,tenv,[fd])
  
  and collectHeadersFromFunDecList(venv, tenv, A.FunctionDec(fundeclist)) =
    foldl (fn(fundec, venv) => S.enter(venv, #name fundec, getFunDecHeader(fundec, tenv))) venv fundeclist
  
  and getFunDecHeader({name, params, body, pos,
        result=NONE}, tenv) =
      let
        fun transparam{name, typ, pos} = 
            case S.look(tenv, typ) of
              SOME t => {name=name, ty=t}
              | _ => ErrorMsg.error pos ("Undefined type " ^ typ ^ " for parameter " ^ name ^ " in function definition at position " ^ Int.toString(pos))
        val params' = map transparam params
      in E.FunEntry{
          formals=map #ty params',
          result=Types.NIL
        }
      end
    | getFunDecHeader({name, params, body, pos,
        result=SOME(rt,pos')}, tenv) =
        let val result_ty = case S.look(tenv,rt) of
            SOME(rty) => rty
            | _ => ErrorMsg.error pos ("Undefined return type " ^ rt ^ " in function definition")
          fun transparam{name, typ, pos} = 
              case S.look(tenv, typ) of
                SOME t => {name=name, ty=t}
                | _ => ErrorMsg.error pos ("Undefined type " ^ typ ^ " for parameter " ^ name ^ " in function definition")
          val params' = map transparam params
        in
         E.FunEntry{
            formals=map #ty params',
            result=result_ty
         }
        end

  (*Absyn.ty -> Types.ty*)
  and transTy (tenv, A.NameTy(absyn_ty)) = 
    (case S.look(tenv,(#1 absyn_ty)) of SOME(ty) => ty
     | NONE => (ErrorMsg.error (#2 absyn_ty) ("Undefined type"); Types.UNIT))
  | transTy (tenv, A.ArrayTy(absyn_ty)) = 
    case S.look(tenv, (#1 absyn_ty)) of SOME(ty) => Types.ARRAY(ty, ref())
       | NONE => (ErrorMsg.error (#2 absyn_ty) ("Undefined type"); Types.UNIT)  

  fun transProg (tree : Absyn.exp) = 
    (transExp(E.base_venv, E.base_tenv, tree);())
    
end
