structure A = Absyn;

fun group_at_let decs = 
    case decs of
        [] => []
        | A.TypeDec(t1) :: A.TypeDec(t2) :: decs' => group_at_let(A.TypeDec(t2@t1)::decs')
        | A.FunctionDec(f1) :: A.FunctionDec(f2) :: decs' => group_at_let(A.FunctionDec(f2@f1)::decs')
        | x::decs' => x :: group_at_let(decs') 

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS


%nonassoc IF FOR WHILE
%nonassoc THEN TO
%nonassoc ELSE DO
%right OF
%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT GT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%nonterm  exp of A.exp
  | program of A.exp
  | cond of A.exp
  | lvalue of A.var
  | loop of A.exp
  | decs of A.dec list
  | expseq of A.exp list
  | dec of A.dec
  | tydec of A.dec
  | fundec of A.dec
  | vardec of A.dec
  | ty of A.ty
  | tyfields of {name: A.symbol, escape: bool ref, typ: A.symbol, pos: A.pos} list
  | funargs of A.exp list
  | recordargs of (A.symbol * A.exp * A.pos) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF
%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
        DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program : exp                                            (exp)

decs : dec decs                                          (dec :: decs)
    |                                                    ([])

dec : tydec                                              (tydec)
    | vardec                                             (vardec)
    | fundec                                             (fundec)

tydec : TYPE ID EQ ty                                    (A.TypeDec([{name = Symbol.symbol(ID), ty = ty, pos = IDleft}]))

ty : ID                                                  (A.NameTy(Symbol.symbol(ID), IDleft))
    | LBRACE RBRACE                                      (A.RecordTy([]))
    | LBRACE tyfields RBRACE                             (A.RecordTy(tyfields))
    | ARRAY OF ID                                        (A.ArrayTy(Symbol.symbol(ID), IDleft))

tyfields : ID COLON ID                                   ({name = Symbol.symbol(ID1), 
                                                           escape = ref false, 
                                                           typ = Symbol.symbol(ID2), 
                                                           pos = ID1left} :: [])
    | ID COLON ID COMMA tyfields                         ({name = Symbol.symbol(ID1), 
                                                           escape = ref false, 
                                                           typ = Symbol.symbol(ID2), 
                                                           pos = ID1left} :: tyfields)

vardec : VAR ID ASSIGN exp                               (A.VarDec({name = Symbol.symbol(ID), 
                                                                    escape = ref false, 
                                                                    typ = NONE, 
                                                                    init = exp, 
                                                                    pos = VARleft}))
    | VAR ID COLON ID ASSIGN exp                         (A.VarDec({name = Symbol.symbol(ID1), 
                                                                    escape = ref false, 
                                                                    typ = SOME (Symbol.symbol(ID2), ID2left), 
                                                                    init = exp, 
                                                                    pos = VARleft}))

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp       (A.FunctionDec([{name = Symbol.symbol(ID), 
                                                                          params = tyfields, 
                                                                          result = NONE, 
                                                                          body = exp, 
                                                                          pos = FUNCTIONleft}]))
    | FUNCTION ID LPAREN RPAREN EQ exp                   (A.FunctionDec([{name = Symbol.symbol(ID), 
                                                                          params = [], 
                                                                          result = NONE, 
                                                                          body = exp, 
                                                                          pos = FUNCTIONleft}]))
    | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp (A.FunctionDec([{name = Symbol.symbol(ID1), 
                                                                          params = tyfields, 
                                                                          result = SOME(Symbol.symbol(ID2), ID2left), 
                                                                          body = exp, 
                                                                          pos = FUNCTIONleft}]))
    | FUNCTION ID LPAREN RPAREN COLON ID EQ exp          (A.FunctionDec([{name = Symbol.symbol(ID1), 
                                                                          params = [], 
                                                                          result = SOME(Symbol.symbol(ID2), ID2left), 
                                                                          body = exp, 
                                                                          pos = FUNCTIONleft}]))

lvalue : ID                                              ()
    | lvalue DOT ID                                      ()
    | lvalue LBRACK exp RBRACK                           ()

loop : WHILE exp DO exp                                  ()
    |  FOR ID ASSIGN exp TO exp DO exp                   ()
        
exp : INT                                                ()
    | STRING                                             ()
    | NIL                                                ()
    | BREAK                                              ()
    | lvalue ASSIGN exp                                  ()
    | lvalue                                             ()
    | LET decs IN expseq END                             (A.LetExp({decs = group_at_let(decs), 
                                                                   body = expseq,
                                                                   pos = LETleft}))
    | ID LPAREN RPAREN                                   ()
    | ID LPAREN funargs RPAREN                           ()
    | lvalue LBRACK exp RBRACK OF exp                    ()
    | ID LBRACE RBRACE                                   ()
    | ID LBRACE recordargs RBRACE                        ()
    | cond                                               ()
    | loop                                               ()
    | exp AND exp                                        ()
    | exp OR exp                                         ()
    | exp EQ exp                                         ()
    | exp NEQ exp                                        ()
    | exp LT exp                                         ()
    | exp GT exp                                         ()
    | exp LE exp                                         ()
    | exp GE exp                                         ()
    | exp PLUS exp                                       ()
    | exp MINUS exp                                      ()
    | exp TIMES exp                                      ()
    | exp DIVIDE exp                                     ()
    | MINUS exp         %prec UMINUS                     ()
    | LPAREN expseq RPAREN                               ()
    | LPAREN RPAREN                                      ()

recordargs : ID EQ exp                                   ()
    | recordargs COMMA ID EQ exp                         ()

funargs : exp                                            ()
    | exp COMMA funargs	                                 ()

cond : IF exp THEN exp ELSE exp                          ()
    | IF exp THEN exp                                    ()

expseq : exp SEMICOLON expseq                            ()
    | exp                                                ()
