structure A = Absyn;

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE | UMINUS


%nonassoc IF FOR WHILE
%nonassoc THEN TO
%nonassoc ELSE DO
%right OF
%nonassoc ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT GT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%nonterm  exp of A.exp | program of A.exp | cond of {test: A.exp, then': A.exp, else': A.exp option, pos: A.pos}
  | lvalue of A.var
  | whileloop of {test: A.exp, body: A.exp, pos: A.pos}
  | forloop of {var: A.symbol, escape: bool ref, lo: A.exp, hi: A.exp, body: A.exp, pos: A.pos}
  | decs of A.dec list | expseq of A.exp list
  | dec of A.dec | tydec of {name: A.symbol, ty: A.ty, pos: A.pos} list | fundec of A.fundec list
  | vardec of {name: A.symbol, escape: bool ref, typ: (A.symbol * A.pos) option, init: A.exp, pos: A.pos}
  | ty of A.ty | tyfields of A.field list | funargs of A.exp list | recordargs of (A.symbol * A.exp * A.pos) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF
%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
        DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program : exp                                            (exp)

decs : dec decs                                          (dec :: decs)
    | dec                                                (dec :: nil)

dec : tydec                                              ()
    | vardec                                             ()
    | fundec                                             ()
    |                                                    (nil)

tydec : TYPE ID EQ ty                                    ()

ty : ID                                                  ()
    | LBRACE RBRACE                                      ()
    | LBRACE tyfields RBRACE                             ()
    | ARRAY OF ID                                        ()

tyfields : ID COLON ID                                   ()
    | tyfields COMMA ID COLON ID                         ()

vardec : VAR ID ASSIGN exp                               ()
    | VAR ID COLON ID ASSIGN exp                         ()

fundec : FUNCTION ID LPAREN tyfields RPAREN EQ exp       ()
    | FUNCTION ID LPAREN RPAREN EQ exp                   ()
    | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp ()
    | FUNCTION ID LPAREN RPAREN COLON ID EQ exp          ()

lvalue : ID                                              ()
    | lvalue DOT ID                                      ()
    | lvalue LBRACK exp RBRACK                           ()

whileloop : WHILE exp DO exp                             ()
forloop : FOR ID ASSIGN exp TO exp DO exp                ()
        
exp : INT                                                ()
    | STRING                                             ()
    | NIL                                                ()
    | BREAK                                              ()
    | lvalue ASSIGN exp                                  ()
    | lvalue                                             ()
    | LET decs IN expseq END                             ()
    | ID LPAREN RPAREN                                   ()
    | ID LPAREN funargs RPAREN                           ()
    | lvalue LBRACK exp RBRACK OF exp                    ()
    | ID LBRACE RBRACE                                   ()
    | ID LBRACE recordargs RBRACE                        ()
    | cond                                               ()
    | whileloop                                          ()
    | forloop                                            ()
    | exp AND exp                                        ()
    | exp OR exp                                         ()
    | exp EQ exp                                         ()
    | exp NEQ exp                                        ()
    | exp LT exp                                         ()
    | exp GT exp                                         ()
    | exp LE exp                                         ()
    | exp GE exp                                         ()
    | exp PLUS exp                                       ()
    | exp MINUS exp                                      ()
    | exp TIMES exp                                      ()
    | exp DIVIDE exp                                     ()
    | MINUS exp         %prec UMINUS                     ()
    | LPAREN expseq RPAREN                               ()
    | LPAREN RPAREN                                      ()

recordargs : ID EQ exp                                   ()
    | recordargs COMMA ID EQ exp                         ()

funargs : exp                                            ()
    | exp COMMA funargs	                                 ()

cond : IF exp THEN exp ELSE exp                          ()
    | IF exp THEN exp                                    ()

expseq : exp SEMICOLON expseq                            ()
    | exp                                                ()
